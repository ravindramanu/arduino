   1               		.file	"USART.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/manu/github/arduino/LIDARBOT/",100,0,2,.Ltext0
   8               		.stabs	"source/os/USART.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=r(0,2);0;127;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"__int128:t(0,6)=@s128;r(0,6);02000000000000000000000000000000000000000000;0177777777777777
  18               		.stabs	"__int128 unsigned:t(0,7)=@s128;r(0,7);0;03777777777777777777777777777777777777777777;",128
  19               		.stabs	"long long int:t(0,8)=@s64;r(0,8);01000000000000000000000;00777777777777777777777;",128,0,0
  20               		.stabs	"long long unsigned int:t(0,9)=@s64;r(0,9);0;01777777777777777777777;",128,0,0,0
  21               		.stabs	"short int:t(0,10)=r(0,10);-32768;32767;",128,0,0,0
  22               		.stabs	"short unsigned int:t(0,11)=r(0,11);0;0177777;",128,0,0,0
  23               		.stabs	"signed char:t(0,12)=@s8;r(0,12);-128;127;",128,0,0,0
  24               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  25               		.stabs	"float:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"double:t(0,15)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"long double:t(0,16)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"short _Fract:t(0,17)=r(0,1);1;0;",128,0,0,0
  29               		.stabs	"_Fract:t(0,18)=r(0,1);2;0;",128,0,0,0
  30               		.stabs	"long _Fract:t(0,19)=r(0,1);4;0;",128,0,0,0
  31               		.stabs	"long long _Fract:t(0,20)=r(0,1);8;0;",128,0,0,0
  32               		.stabs	"unsigned short _Fract:t(0,21)=r(0,1);1;0;",128,0,0,0
  33               		.stabs	"unsigned _Fract:t(0,22)=r(0,1);2;0;",128,0,0,0
  34               		.stabs	"unsigned long _Fract:t(0,23)=r(0,1);4;0;",128,0,0,0
  35               		.stabs	"unsigned long long _Fract:t(0,24)=r(0,1);8;0;",128,0,0,0
  36               		.stabs	"_Sat short _Fract:t(0,25)=r(0,1);1;0;",128,0,0,0
  37               		.stabs	"_Sat _Fract:t(0,26)=r(0,1);2;0;",128,0,0,0
  38               		.stabs	"_Sat long _Fract:t(0,27)=r(0,1);4;0;",128,0,0,0
  39               		.stabs	"_Sat long long _Fract:t(0,28)=r(0,1);8;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned short _Fract:t(0,29)=r(0,1);1;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned _Fract:t(0,30)=r(0,1);2;0;",128,0,0,0
  42               		.stabs	"_Sat unsigned long _Fract:t(0,31)=r(0,1);4;0;",128,0,0,0
  43               		.stabs	"_Sat unsigned long long _Fract:t(0,32)=r(0,1);8;0;",128,0,0,0
  44               		.stabs	"short _Accum:t(0,33)=r(0,1);2;0;",128,0,0,0
  45               		.stabs	"_Accum:t(0,34)=r(0,1);4;0;",128,0,0,0
  46               		.stabs	"long _Accum:t(0,35)=r(0,1);8;0;",128,0,0,0
  47               		.stabs	"long long _Accum:t(0,36)=r(0,1);8;0;",128,0,0,0
  48               		.stabs	"unsigned short _Accum:t(0,37)=r(0,1);2;0;",128,0,0,0
  49               		.stabs	"unsigned _Accum:t(0,38)=r(0,1);4;0;",128,0,0,0
  50               		.stabs	"unsigned long _Accum:t(0,39)=r(0,1);8;0;",128,0,0,0
  51               		.stabs	"unsigned long long _Accum:t(0,40)=r(0,1);8;0;",128,0,0,0
  52               		.stabs	"_Sat short _Accum:t(0,41)=r(0,1);2;0;",128,0,0,0
  53               		.stabs	"_Sat _Accum:t(0,42)=r(0,1);4;0;",128,0,0,0
  54               		.stabs	"_Sat long _Accum:t(0,43)=r(0,1);8;0;",128,0,0,0
  55               		.stabs	"_Sat long long _Accum:t(0,44)=r(0,1);8;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned short _Accum:t(0,45)=r(0,1);2;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned _Accum:t(0,46)=r(0,1);4;0;",128,0,0,0
  58               		.stabs	"_Sat unsigned long _Accum:t(0,47)=r(0,1);8;0;",128,0,0,0
  59               		.stabs	"_Sat unsigned long long _Accum:t(0,48)=r(0,1);8;0;",128,0,0,0
  60               		.stabs	"void:t(0,49)=(0,49)",128,0,0,0
  61               		.stabs	"source/os/USART.h",130,0,0,0
  62               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/avr/io.h",130,0,0,0
  63               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/avr/sfr_defs.h",130,0,0,0
  64               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/inttypes.h",130,0,0,0
  65               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/stdint.h",130,0,0,0
  66               		.stabs	"int8_t:t(5,1)=(0,12)",128,0,125,0
  67               		.stabs	"uint8_t:t(5,2)=(0,13)",128,0,126,0
  68               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,127,0
  69               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,128,0
  70               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,129,0
  71               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,130,0
  72               		.stabs	"int64_t:t(5,7)=(0,8)",128,0,132,0
  73               		.stabs	"uint64_t:t(5,8)=(0,9)",128,0,133,0
  74               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,146,0
  75               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,151,0
  76               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,163,0
  77               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,168,0
  78               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,173,0
  79               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,178,0
  80               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,183,0
  81               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,188,0
  82               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,196,0
  83               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,203,0
  84               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,217,0
  85               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,222,0
  86               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,227,0
  87               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,232,0
  88               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,237,0
  89               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,242,0
  90               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,250,0
  91               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,257,0
  92               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,277,0
  93               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,282,0
  94               		.stabn	162,0,0,0
  95               		.stabs	"int_farptr_t:t(4,1)=(5,5)",128,0,77,0
  96               		.stabs	"uint_farptr_t:t(4,2)=(5,6)",128,0,81,0
  97               		.stabn	162,0,0,0
  98               		.stabn	162,0,0,0
  99               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/avr/fuse.h",130,0,0,0
 100               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,244,0
 101               		.stabn	162,0,0,0
 102               		.stabn	162,0,0,0
 103               		.stabs	"source/os/../drivers/LIDAR_driver.h",130,0,0,0
 104               		.stabs	"LIDARMODULESTRUCT:T(7,1)=s9headbyte1:(0,13),0,8;headbyte2:(0,13),8,8;distanceLow:(0,13),16
 105               		.stabs	"LIDAR:t(7,2)=(7,1)",128,0,26,0
 106               		.stabs	"OBJECTPROXIMITYSTRUCT:T(7,3)=s3proximity:(0,4),0,16;valid:(0,13),16,8;;",128,0,0,0
 107               		.stabs	"OBJECT:t(7,4)=(7,3)",128,0,35,0
 108               		.stabn	162,0,0,0
 109               		.stabs	"bufferStatus:T(1,1)=eBUFFER_OK:0,BUFFER_EMPTY:1,BUFFER_FULL:2,;",128,0,0,0
 110               		.stabs	"Buffer:T(1,2)=s1026data:(1,3)=ar(1,4)=r(1,4);0;0177777;;0;1023;(0,13),0,8192;readindex:(0,
 111               		.stabs	"Buffer:t(1,5)=(1,2)",128,0,34,0
 112               		.stabn	162,0,0,0
 113               		.stabs	"usartinit:F(0,49)",36,0,3,usartinit
 114               	.global	usartinit
 115               		.type	usartinit, @function
 116               	usartinit:
 117               		.stabd	46,0,0
   1:source/os/USART.c **** #include "USART.h"
   2:source/os/USART.c **** 
   3:source/os/USART.c **** void usartinit(void){
 118               		.stabn	68,0,3,.LM0-.LFBB1
 119               	.LM0:
 120               	.LFBB1:
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
   4:source/os/USART.c ****   // Initialize the hardware and software USART
   5:source/os/USART.c ****   hardwareserialsetup();
 125               		.stabn	68,0,5,.LM1-.LFBB1
 126               	.LM1:
 127 0000 0E94 0000 		call hardwareserialsetup
   6:source/os/USART.c ****   softwareserialsetup();
 128               		.stabn	68,0,6,.LM2-.LFBB1
 129               	.LM2:
 130 0004 0C94 0000 		jmp softwareserialsetup
 131               		.size	usartinit, .-usartinit
 132               	.Lscope1:
 133               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 134               		.stabd	78,0,0
 135               		.stabs	"softwareserialTransmit:F(0,49)",36,0,9,softwareserialTransmit
 136               		.stabs	"byte:P(0,13)",64,0,9,24
 137               	.global	softwareserialTransmit
 138               		.type	softwareserialTransmit, @function
 139               	softwareserialTransmit:
 140               		.stabd	46,0,0
   7:source/os/USART.c **** }
   8:source/os/USART.c **** 
   9:source/os/USART.c **** void softwareserialTransmit(unsigned char byte){
 141               		.stabn	68,0,9,.LM3-.LFBB2
 142               	.LM3:
 143               	.LFBB2:
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 0 */
 147               	.L__stack_usage = 0
  10:source/os/USART.c ****   /* Reference: https://www.avrfreaks.net/forum/software-serial-uart?page=all */
  11:source/os/USART.c ****   /* The software serial transmit function is for debug only.
  12:source/os/USART.c ****    * This function will send out any data that is passed into it on to a
  13:source/os/USART.c ****    * software emulated UART on pin 12 of the Arduino.
  14:source/os/USART.c ****    */
  15:source/os/USART.c ****   unsigned char bitmask=0x01;
  16:source/os/USART.c **** 
  17:source/os/USART.c ****   // Send out start bit by turning PORTB4 OFF and wait ~104 ms (since baud is 9600)
  18:source/os/USART.c ****   PORTB &= ~(1<<PORTB4);
 148               		.stabn	68,0,18,.LM4-.LFBB2
 149               	.LM4:
 150 0008 2C98      		cbi 0x5,4
 151               	.LBB10:
 152               	.LBB11:
 153               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h",132,0,0,.Ltext1
 154               	.Ltext1:
   1:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    All rights reserved.
   5:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
   6:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
   9:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  12:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      the documentation and/or other materials provided with the
  15:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      distribution.
  16:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  17:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****      from this software without specific prior written permission.
  20:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  21:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  33:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /* $Id$ */
  34:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  35:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  38:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #ifndef __DOXYGEN__
  39:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #  endif
  42:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  44:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #include <inttypes.h>
  45:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #include <util/delay_basic.h>
  46:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #include <math.h>
  47:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  48:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /** \file */
  49:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \code
  51:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     #include <util/delay.h>
  54:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \endcode
  55:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  56:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     used.
  60:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  61:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     convenience functions where actual time values can be specified
  64:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  70:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     routines linked into the application.
  78:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  79:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  83:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** */
  84:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  85:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif
  89:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  90:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #ifndef F_CPU
  91:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /** \ingroup util_delay
  94:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \def F_CPU
  95:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     \brief CPU frequency in Hz
  96:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
  97:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 103:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****     integer value.
 107:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****  */
 108:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** # define F_CPU 1000000UL
 109:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif
 110:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 111:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #ifndef __OPTIMIZE__
 112:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif
 114:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 115:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   __STDC_HOSTED__
 118:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #  include <math.h>
 119:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif
 120:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 121:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /**
 122:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \ingroup util_delay
 123:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 124:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 126:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 129:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 131:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    user will not be informed about decreased resolution.
 136:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 137:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    no delay i.e., 0ms.
 141:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 142:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    microseconds of delay.
 146:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 147:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    respectively.
 151:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 152:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \note
 153:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 154:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The implementation of _delay_ms() based on
 155:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    must be defined before including this header file. Also, the
 159:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    not available to the compiler then.
 163:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 164:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****  */
 165:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** void
 166:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** _delay_ms(double __ms)
 167:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** {
 168:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	double __tmp ;
 169:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   __STDC_HOSTED__
 172:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	uint32_t __ticks_dc;
 173:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 176:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 179:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 182:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#else
 183:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		//round up by default
 184:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#endif
 186:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 187:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 189:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #else
 190:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	uint16_t __ticks;
 191:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	if (__tmp < 1.0)
 193:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks = 1;
 194:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	else if (__tmp > 65535)
 195:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	{
 196:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		while(__ticks)
 199:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		{
 200:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 			// wait 1/10 ms
 201:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 			__ticks --;
 203:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		}
 204:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		return;
 205:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	}
 206:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	else
 207:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #endif
 210:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** }
 211:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 212:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** /**
 213:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \ingroup util_delay
 214:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 215:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 217:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 220:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 222:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    will not be informed about this case.
 225:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 226:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    no delay i.e., 0us.
 230:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 231:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    microseconds of delay.
 235:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 236:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    respectively.
 240:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 241:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \note
 242:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 243:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    The implementation of _delay_ms() based on
 244:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    must be defined before including this header file. Also, the
 248:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****    not available to the compiler then.
 252:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 253:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****  */
 254:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** void
 255:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** _delay_us(double __us)
 256:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** {
 257:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	double __tmp ;
 258:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h ****   __STDC_HOSTED__
 261:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	uint32_t __ticks_dc;
 262:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 265:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 268:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 271:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#else
 272:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		//round up by default
 273:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	#endif
 275:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 
 276:/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 155               		.stabn	68,0,276,.LM5-.LFBB2
 156               	.LM5:
 157 000a 44E8      		ldi r20,lo8(-124)
 158 000c 4A95      	1:	dec r20
 159 000e 01F4      		brne 1b
 160 0010 28E0      		ldi r18,lo8(8)
 161 0012 30E0      		ldi r19,0
 162               	.LBE11:
 163               	.LBE10:
 164               		.stabs	"source/os/USART.c",132,0,0,.Ltext2
 165               	.Ltext2:
  15:source/os/USART.c **** 
 166               		.stabn	68,0,15,.LM6-.LFBB2
 167               	.LM6:
 168 0014 91E0      		ldi r25,lo8(1)
 169               	.L5:
  19:source/os/USART.c ****   _delay_us(EMULATED_UARTDELAY_MICROSEC);
  20:source/os/USART.c **** 
  21:source/os/USART.c ****   // Toggle PORTB4 according to data bits in the reverse order LSB --> MSB
  22:source/os/USART.c ****   while (bitmask) {
  23:source/os/USART.c ****     if (byte & bitmask) {
 170               		.stabn	68,0,23,.LM7-.LFBB2
 171               	.LM7:
 172 0016 482F      		mov r20,r24
 173 0018 4923      		and r20,r25
 174 001a 01F0      		breq .L3
  24:source/os/USART.c ****       PORTB |= (1<<PORTB4);
 175               		.stabn	68,0,24,.LM8-.LFBB2
 176               	.LM8:
 177 001c 2C9A      		sbi 0x5,4
 178 001e 00C0      		rjmp .L7
 179               	.L3:
  25:source/os/USART.c ****       _delay_us(EMULATED_UARTDELAY_MICROSEC);
  26:source/os/USART.c ****     }
  27:source/os/USART.c ****     else {
  28:source/os/USART.c ****       PORTB &= ~(1<<PORTB4);
 180               		.stabn	68,0,28,.LM9-.LFBB2
 181               	.LM9:
 182 0020 2C98      		cbi 0x5,4
 183               	.L7:
 184               	.LBB12:
 185               	.LBB13:
 186               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h",132,0,0,.Ltext3
 187               	.Ltext3:
 188               		.stabn	68,0,276,.LM10-.LFBB2
 189               	.LM10:
 190 0022 44E8      		ldi r20,lo8(-124)
 191 0024 4A95      	1:	dec r20
 192 0026 01F4      		brne 1b
 193               	.LBE13:
 194               	.LBE12:
 195               		.stabs	"source/os/USART.c",132,0,0,.Ltext4
 196               	.Ltext4:
  29:source/os/USART.c ****       _delay_us(EMULATED_UARTDELAY_MICROSEC);
  30:source/os/USART.c ****     }
  31:source/os/USART.c ****     bitmask=bitmask<<1;
 197               		.stabn	68,0,31,.LM11-.LFBB2
 198               	.LM11:
 199 0028 990F      		lsl r25
 200 002a 2150      		subi r18,1
 201 002c 3109      		sbc r19,__zero_reg__
  22:source/os/USART.c ****     if (byte & bitmask) {
 202               		.stabn	68,0,22,.LM12-.LFBB2
 203               	.LM12:
 204 002e 01F4      		brne .L5
  32:source/os/USART.c ****   }
  33:source/os/USART.c **** 
  34:source/os/USART.c ****   // Send out stop bit by turning PORTB4 ON and wait ~104 ms (since baud is 9600).
  35:source/os/USART.c ****   // The line can stay ON since that would be IDLE.
  36:source/os/USART.c ****   PORTB |= (1<<PORTB4);
 205               		.stabn	68,0,36,.LM13-.LFBB2
 206               	.LM13:
 207 0030 2C9A      		sbi 0x5,4
 208               	.LBB14:
 209               	.LBB15:
 210               		.stabs	"/home/manu/github/arduino/LIDARBOT/libraries/util/delay.h",132,0,0,.Ltext5
 211               	.Ltext5:
 212               		.stabn	68,0,276,.LM14-.LFBB2
 213               	.LM14:
 214 0032 84E8      		ldi r24,lo8(-124)
 215 0034 8A95      	1:	dec r24
 216 0036 01F4      		brne 1b
 217 0038 0895      		ret
 218               	.LBE15:
 219               	.LBE14:
 220               		.size	softwareserialTransmit, .-softwareserialTransmit
 221               		.stabs	"bitmask:r(0,13)",64,0,15,25
 222               		.stabn	192,0,0,.LFBB2-.LFBB2
 223               		.stabn	224,0,0,.Lscope2-.LFBB2
 224               	.Lscope2:
 225               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 226               		.stabd	78,0,0
 227               		.stabs	"rxBufferRead:F(1,1)",36,0,40,rxBufferRead
 228               		.stabs	"byte:P(0,50)=*(0,13)",64,0,40,24
 229               	.global	rxBufferRead
 230               		.type	rxBufferRead, @function
 231               	rxBufferRead:
 232               		.stabd	46,0,0
 233               		.stabs	"source/os/USART.c",132,0,0,.Ltext6
 234               	.Ltext6:
  37:source/os/USART.c ****   _delay_us(EMULATED_UARTDELAY_MICROSEC);
  38:source/os/USART.c **** }
  39:source/os/USART.c **** 
  40:source/os/USART.c **** enum bufferStatus rxBufferRead(unsigned char * byte){
 235               		.stabn	68,0,40,.LM15-.LFBB3
 236               	.LM15:
 237               	.LFBB3:
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
  41:source/os/USART.c ****   // Check first before reading the buffer
  42:source/os/USART.c ****   if ((rxBuffer.readindex) == (rxBuffer.writeindex)) {
 242               		.stabn	68,0,42,.LM16-.LFBB3
 243               	.LM16:
 244 003a 3091 0000 		lds r19,rxBuffer+1024
 245 003e 2091 0000 		lds r18,rxBuffer+1025
 246 0042 3213      		cpse r19,r18
 247 0044 00C0      		rjmp .L10
  43:source/os/USART.c ****     /* This would mean the buffer is empty. */
  44:source/os/USART.c ****     softwareserialTransmit(0xAA);
 248               		.stabn	68,0,44,.LM17-.LFBB3
 249               	.LM17:
 250 0046 8AEA      		ldi r24,lo8(-86)
 251 0048 0E94 0000 		call softwareserialTransmit
  45:source/os/USART.c ****     return BUFFER_EMPTY;
 252               		.stabn	68,0,45,.LM18-.LFBB3
 253               	.LM18:
 254 004c 81E0      		ldi r24,lo8(1)
 255 004e 90E0      		ldi r25,0
 256 0050 0895      		ret
 257               	.L10:
  46:source/os/USART.c ****   }
  47:source/os/USART.c ****   // Read the variable from buffer
  48:source/os/USART.c ****   *byte=rxBuffer.data[rxBuffer.readindex];
 258               		.stabn	68,0,48,.LM19-.LFBB3
 259               	.LM19:
 260 0052 E091 0000 		lds r30,rxBuffer+1024
 261 0056 F0E0      		ldi r31,0
 262 0058 E050      		subi r30,lo8(-(rxBuffer))
 263 005a F040      		sbci r31,hi8(-(rxBuffer))
 264 005c 2081      		ld r18,Z
 265 005e FC01      		movw r30,r24
 266 0060 2083      		st Z,r18
  49:source/os/USART.c ****   buffercount = buffercount - 1;
 267               		.stabn	68,0,49,.LM20-.LFBB3
 268               	.LM20:
 269 0062 8091 0000 		lds r24,buffercount
 270 0066 9091 0000 		lds r25,buffercount+1
 271 006a 0197      		sbiw r24,1
 272 006c 9093 0000 		sts buffercount+1,r25
 273 0070 8093 0000 		sts buffercount,r24
  50:source/os/USART.c **** 
  51:source/os/USART.c ****   /* Here is another hack to reset the value of index when we hit BUFFERSIZE
  52:source/os/USART.c ****   * Using modulus operator gives us the remainder of a divison. Our BUFFERSIZE
  53:source/os/USART.c ****   * is the maximum value of the size, so for every value that is less than
  54:source/os/USART.c ****   * BUFFERSIZE the value fo the index from the below expression is itself.
  55:source/os/USART.c ****   * When we reach BUFFERSIZE, the value will be zero.
  56:source/os/USART.c ****   */
  57:source/os/USART.c ****   rxBuffer.readindex = ((rxBuffer.readindex)+1) % BUFFERSIZE;
 274               		.stabn	68,0,57,.LM21-.LFBB3
 275               	.LM21:
 276 0074 8091 0000 		lds r24,rxBuffer+1024
 277 0078 90E0      		ldi r25,0
 278 007a 0196      		adiw r24,1
 279 007c 8093 0000 		sts rxBuffer+1024,r24
  58:source/os/USART.c ****   return BUFFER_OK;
 280               		.stabn	68,0,58,.LM22-.LFBB3
 281               	.LM22:
 282 0080 80E0      		ldi r24,0
 283 0082 90E0      		ldi r25,0
  59:source/os/USART.c **** }
 284               		.stabn	68,0,59,.LM23-.LFBB3
 285               	.LM23:
 286 0084 0895      		ret
 287               		.size	rxBufferRead, .-rxBufferRead
 288               	.Lscope3:
 289               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 290               		.stabd	78,0,0
 291               		.stabs	"rxBufferWrite:F(1,1)",36,0,62,rxBufferWrite
 292               	.global	rxBufferWrite
 293               		.type	rxBufferWrite, @function
 294               	rxBufferWrite:
 295               		.stabd	46,0,0
  60:source/os/USART.c **** 
  61:source/os/USART.c **** 
  62:source/os/USART.c **** enum bufferStatus rxBufferWrite(){
 296               		.stabn	68,0,62,.LM24-.LFBB4
 297               	.LM24:
 298               	.LFBB4:
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
  63:source/os/USART.c ****   // That modulus thing again, although  we will write it out for readablity
  64:source/os/USART.c ****   unsigned char insertindex = ((rxBuffer.writeindex)+1) % BUFFERSIZE;
 303               		.stabn	68,0,64,.LM25-.LFBB4
 304               	.LM25:
 305 0086 8091 0000 		lds r24,rxBuffer+1025
 306 008a 90E0      		ldi r25,0
 307 008c 0196      		adiw r24,1
  65:source/os/USART.c **** 
  66:source/os/USART.c ****   // Check if the next element if someting that needs to be read out. If it is
  67:source/os/USART.c ****   // the buffer is definitely full.
  68:source/os/USART.c ****   if (insertindex == (rxBuffer.readindex)) {
 308               		.stabn	68,0,68,.LM26-.LFBB4
 309               	.LM26:
 310 008e 2091 0000 		lds r18,rxBuffer+1024
 311 0092 2813      		cpse r18,r24
 312 0094 00C0      		rjmp .L13
  69:source/os/USART.c ****     /* This would mean the buffer is full. But what shoudl we do if the buffer
  70:source/os/USART.c ****      * is full. Why just return. UDR0 itself is hardware buffered. So are very
  71:source/os/USART.c ****      * less likely to lose any data. But in case we reach that point we just
  72:source/os/USART.c ****      * wait until something is read.
  73:source/os/USART.c ****      */
  74:source/os/USART.c ****     softwareserialTransmit(0xFF);
 313               		.stabn	68,0,74,.LM27-.LFBB4
 314               	.LM27:
 315 0096 8FEF      		ldi r24,lo8(-1)
 316 0098 0E94 0000 		call softwareserialTransmit
  75:source/os/USART.c ****     return BUFFER_FULL;
 317               		.stabn	68,0,75,.LM28-.LFBB4
 318               	.LM28:
 319 009c 82E0      		ldi r24,lo8(2)
 320 009e 90E0      		ldi r25,0
 321 00a0 0895      		ret
 322               	.L13:
  76:source/os/USART.c ****   }
  77:source/os/USART.c ****   // Read the variable from UDR0 into the buffer
  78:source/os/USART.c ****   rxBuffer.data[rxBuffer.writeindex] = UDR0;
 323               		.stabn	68,0,78,.LM29-.LFBB4
 324               	.LM29:
 325 00a2 E091 0000 		lds r30,rxBuffer+1025
 326 00a6 F0E0      		ldi r31,0
 327 00a8 9091 C600 		lds r25,198
 328 00ac E050      		subi r30,lo8(-(rxBuffer))
 329 00ae F040      		sbci r31,hi8(-(rxBuffer))
 330 00b0 9083      		st Z,r25
  79:source/os/USART.c ****   buffercount = (buffercount+1) % BUFFERSIZE;
 331               		.stabn	68,0,79,.LM30-.LFBB4
 332               	.LM30:
 333 00b2 2091 0000 		lds r18,buffercount
 334 00b6 3091 0000 		lds r19,buffercount+1
 335 00ba 2F5F      		subi r18,-1
 336 00bc 3F4F      		sbci r19,-1
 337 00be 3370      		andi r19,3
 338 00c0 3093 0000 		sts buffercount+1,r19
 339 00c4 2093 0000 		sts buffercount,r18
  80:source/os/USART.c **** 
  81:source/os/USART.c ****   // Increment the index
  82:source/os/USART.c ****   rxBuffer.writeindex = insertindex;
 340               		.stabn	68,0,82,.LM31-.LFBB4
 341               	.LM31:
 342 00c8 8093 0000 		sts rxBuffer+1025,r24
  83:source/os/USART.c ****   return BUFFER_OK;
 343               		.stabn	68,0,83,.LM32-.LFBB4
 344               	.LM32:
 345 00cc 80E0      		ldi r24,0
 346 00ce 90E0      		ldi r25,0
  84:source/os/USART.c **** }
 347               		.stabn	68,0,84,.LM33-.LFBB4
 348               	.LM33:
 349 00d0 0895      		ret
 350               		.size	rxBufferWrite, .-rxBufferWrite
 351               	.Lscope4:
 352               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 353               		.stabd	78,0,0
 354               		.comm	buffercount,2,1
 355               		.comm	rxBuffer,1026,1
 356               		.comm	obstacle,3,1
 357               		.comm	tfmini,9,1
 358               		.comm	botmoving,1,1
 359               		.stabs	"botmoving:G(0,13)",32,0,27,0
 360               		.stabs	"tfmini:G(0,51)=B(7,2)",32,0,29,0
 361               		.stabs	"obstacle:G(0,52)=B(7,4)",32,0,37,0
 362               		.stabs	"rxBuffer:G(0,53)=B(1,5)",32,0,37,0
 363               		.stabs	"buffercount:G(0,54)=B(0,4)",32,0,38,0
 364               		.stabs	"",100,0,0,.Letext0
 365               	.Letext0:
 366               		.ident	"GCC: (GNU) 5.4.0"
 367               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 USART.c
     /tmp/cc39Jp6M.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc39Jp6M.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc39Jp6M.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc39Jp6M.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc39Jp6M.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc39Jp6M.s:116    .text:0000000000000000 usartinit
     /tmp/cc39Jp6M.s:139    .text:0000000000000008 softwareserialTransmit
     /tmp/cc39Jp6M.s:231    .text:000000000000003a rxBufferRead
                            *COM*:0000000000000402 rxBuffer
                            *COM*:0000000000000002 buffercount
     /tmp/cc39Jp6M.s:294    .text:0000000000000086 rxBufferWrite
                            *COM*:0000000000000003 obstacle
                            *COM*:0000000000000009 tfmini
                            *COM*:0000000000000001 botmoving

UNDEFINED SYMBOLS
hardwareserialsetup
softwareserialsetup
__do_clear_bss
